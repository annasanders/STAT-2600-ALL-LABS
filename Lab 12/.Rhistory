countries <- function(country1, country2, yr) {
x <- gapminder%>%
filter(country== country1, year== yr)%>%
select(lifeExp)
y <- gapminder%>%
filter(country== country2, year== yr)%>%
select(lifeExp)
if(as.numeric(x)> as.numeric(y)) {
diff<- x-y
} else(as.numeric(y)> as.numeric(x)) {
diff<- y-x
}
return(diff)
}
library(tidyverse)
library(babynames)
countries <- function(country1, country2, yr) {
x <- gapminder%>%
filter(country== country1, year== yr)%>%
select(lifeExp)
y <- gapminder%>%
filter(country== country2, year== yr)%>%
select(lifeExp)
if(as.numeric(x)> as.numeric(y)) {
diff<- x-y
} else(as.numeric(y)> as.numeric(x)) {
diff<- y-x
}
return(diff)
}
countries("Nigeria", "Nepal", "2007")
library(gapminder)
countries <- function(country1, country2, yr) {
x <- gapminder%>%
filter(country== country1, year== yr)%>%
select(lifeExp)
y <- gapminder%>%
filter(country== country2, year== yr)%>%
select(lifeExp)
if(as.numeric(x)> as.numeric(y)) {
diff<- x-y
} else(as.numeric(y)> as.numeric(x)) {
diff<- y-x
}
return(diff)
}
countries <- function(country1, country2, yr) {
x <- gapminder%>%
filter(country== country1, year== yr)%>%
select(lifeExp)
y <- gapminder%>%
filter(country== country2, year== yr)%>%
select(lifeExp)
if(as.numeric(x)> as.numeric(y)) [
diff<- x-y
] else(as.numeric(y)> as.numeric(x)) [
diff<- y-x
]
return(diff)
}
countries <- function(country1, country2, yr) {
x <- gapminder%>%
filter(country== country1, year== yr)%>%
select(lifeExp)
y <- gapminder%>%
filter(country== country2, year== yr)%>%
select(lifeExp)
if(as.numeric(x)> as.numeric(y)) {
diff<- x-y
} else(as.numeric(y)> as.numeric(x)) {
diff<- y-x
}
return(diff)
}
countries <- function(country1, country2, yr) {
x <- gapminder%>%
filter(country== country1, year== yr)%>%
select(lifeExp)
y <- gapminder%>%
filter(country== country2, year== yr)%>%
select(lifeExp)
if(as.numeric(x)> as.numeric(y)) {
diff<- x-y
return(diff)
} else(as.numeric(y)> as.numeric(x)) {
diff<- y-x
return(diff)
}
}
countries <- function(country1, country2, yr) {
x <- gapminder%>%
filter(country== country1, year== yr)%>%
select(lifeExp)
y <- gapminder%>%
filter(country== country2, year== yr)%>%
select(lifeExp)
if(x> y) {
diff<- x-y
return(diff)
} else(y> x) {
diff<- y-x
return(diff)
}
}
countries <- function(country1, country2, yr) {
x <- gapminder%>%
filter(country== country1, year== yr)%>%
select(lifeExp)
y <- gapminder%>%
filter(country== country2, year== yr)%>%
select(lifeExp)
return(diff)
}
countries("Nigeria", "Nepal", "2007")
countries <- function(country1, country2, yr) {
x <- gapminder%>%
filter(country== country1, year== yr)%>%
select(lifeExp)
y <- gapminder%>%
filter(country== country2, year== yr)%>%
select(lifeExp)
return(diff)
}
countries("Nigeria", "Nepal", "2007")
countries("Nigeria", "Nepal", 2007)
countries <- function(country1, country2, yr) {
x <- gapminder%>%
filter(country== country1, year== yr)%>%
select(lifeExp)
y <- gapminder%>%
filter(country== country2, year== yr)%>%
select(lifeExp)
diff<- x-y
return(diff)
}
countries("Nigeria", "Nepal", 2007)
gapminder <- gapminder
perm_mean <- function(perms = 1000, values, n1)
{
## Variables ##
# perms: The number of permutations
# values (num):
# n1 (int): Size of group 1
###############
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
mean_vect <- meanVector(0,1000,1)
# Loop throught number of permutations
for (i in c(1:perms))
{
# Step 2:
# Randomly separate vector "values" into disjoint
# groups of size "n1" and "length(values) - n1" respectively
# Step 3:
# Compute the sample means for the two groups from
# step 2
# Step 4:
# Compute the difference in sample means, store the
# value in the vector from step 1
}
# Step 5:
# Return new updated vector, created in step 1
}
library(tidyverse)
library(gapminder)
gapminder <- gapminder
gdp_percap <- gapminder%>%
select(gdpPercap)
life_exp <- gapminder %>%
select(lifeExp)
life_exp <- life_exp$lifeExp
gdp_percap <- gdp_percap$gdpPercap
perm_cor <- function(perms = 1000, x, y)
{
## Variables ##
# perms: The number of permutations
# x: Vector 1 - for computing correlation
# y: Vector 2 - for computing correlation
###############
corr_mat <- matrix(0,1000,1)
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
# Loop throught number of permutations
for (i in c(1:perms))
{
rsamp <- sample(y, length(y), replace = FALSE)
# Step 2:
# Randomly mix up the values in the vector "y"
corr_mat[[i]] = cor(x,rsamp)
# Step 3:
# Compute the correlation between x and the randomly mixed
# up y-vector. Store this value in the vector from step 1.
}
# Step 4:
# Return new updated vector, created in step 1
return(corr_mat)
}
correlation <- as.tibble(perm_cor(x=gdp_percap,y=life_exp))
ggplot(correlation, aes(x=V1))+geom_histogram()
perm_cor <- function(perms = 1000, x, y)
{
## Variables ##
# perms: The number of permutations
# x: Vector 1 - for computing correlation
# y: Vector 2 - for computing correlation
###############
corr_mat <- matrix(0,length(perms),1)
mylist <- rep(list(0,1000))
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
# Loop throught number of permutations
for (i in c(1:perms))
{
mylist[[i]] <- sample(y, length(y), replace = FALSE)
# Step 2:
# Randomly mix up the values in the vector "y"
corr_mat[[i]] = cor(x,mylist[[i]])
# Step 3:
# Compute the correlation between x and the randomly mixed
# up y-vector. Store this value in the vector from step 1.
}
# Step 4:
# Return new updated vector, created in step 1
return(corr_mat)
}
correlation <- as.tibble(0.58+perm_cor(x=life_exp,y=gdp_percap))
props <- as.tibble(quantile(perm_cor(x=gdp_percap,y=life_exp)))
real_cor <- cor(gdp_percap,life_exp)
gdp_percap <- gapminder%>%
select(gdpPercap)
life_exp <- gapminder %>%
select(lifeExp)
gdp_percap <- gdp_percap$gdpPercap
life_exp <- life_exp$lifeExp
perm_cor <- function(perms = 1000, x, y)
{
## Variables ##
# perms: The number of permutations
# x: Vector 1 - for computing correlation
# y: Vector 2 - for computing correlation
###############
corr_mat <- matrix(0,length(perms),1)
mylist <- rep(list(0,1000))
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
# Loop throught number of permutations
for (i in c(1:perms))
{
mylist[[i]] <- sample(y, length(y), replace = FALSE)
# Step 2:
# Randomly mix up the values in the vector "y"
corr_mat[[i]] = cor(x,mylist[[i]])
# Step 3:
# Compute the correlation between x and the randomly mixed
# up y-vector. Store this value in the vector from step 1.
}
# Step 4:
# Return new updated vector, created in step 1
return(corr_mat)
}
correlation <- as.tibble(0.58+perm_cor(x=life_exp,y=gdp_percap))
props <- as.tibble(quantile(perm_cor(x=gdp_percap,y=life_exp)))
real_cor <- cor(gdp_percap,life_exp)
ggplot(correlation, aes(x=value))+geom_histogram() + labs(x= "correlation", y = "count", title = "correlation between GDP per capita and life expectency")+ geom_vline(xintercept = real_cor, col = "Blue")
View(gapminder)
asia_mat <- c(length(10))
asia_mat <- c(1:10)
asia_mat <- c(1:perms)
asiastuff <- function(perms= 1000, y){
asia_vec <- c(1:perms)
for (i in c(1:perms))
{mylist[[i]] <- sample(y, length(y), replace = FALSE)
asia_vec[[i]] = cor(x,mylist[[i]])
return(asia_vec)
}
}
asiastuff("India")
knitr::opts_chunk$set(echo = TRUE)
gapminder2 <- gapminder_unfiltered
library(tidyverse)
library(gapminder)
library(gapminder)
gapminder <- gapminder
gapminder2 <- gapminder_unfiltered
life_expectancy <- gapminder2 %>% select(lifeExp)
life_expectancy <- life_expectancy$lifeExp
perm_mean <- function(perms = 1000, values, n1)
{
## Variables ##
# perms: The number of permutations
# values (num):
# n1 (int): Size of group 1
###############
# Create vector of zeroes of length "perms" to store permuted mean differnces
mean_mat <- matrix(0,1000,1)
# Loop throught number of permutations
for (i in c(1:perms))
{
# Randomly separate vector "values" into disjoint groups of size "n1" and "length(values) - n1" respectively size <- length(values) - n1
randomSamp <- sample(values, length(values)-n1, replace = FALSE)
randomSamp2 <- sample(values, n1, replace = FALSE)
# Compute the sample means for the two groups from step 2
mean1 <- mean(randomSamp)
mean2 <- mean(randomSamp2)
# Compute the difference in sample means, store the value in the vector from step 1
mean_mat[[i]] <- (mean1-mean2)
}
# Return new updated vector, created in step 1
return(mean_mat)
}
life_expAm <- gapminder %>% filter(continent=="Americas") %>% select(lifeExp)
means <- as.tibble(perm_mean(values = life_expectancy, n1 = 300))
summary(life_expAm)
summary(life_expectancy)
stdD <- sqrt((sd(life_expAm$lifeExp))^2/length(life_expAm$lifeExp) + (sd(life_expectancy))^2/length(life_expectancy))
zScore <- realDiff/stdD
realDiff <- mean(life_expAm$lifeExp)-mean(life_expectancy)
zScore <- realDiff/stdD
zScore
ggplot(means, aes(x=V1 ))+geom_histogram()+
xlab("Means")+
geom_vline(xintercept = realDiff, color = "blue", size = .3)+
ylab("Number")+
ggtitle("Difference in Means of Life Expectancy")
zScore <- realDiff/stdD
ggplot(means, aes(x=V1 ))+geom_histogram()+
xlab("Means")+
geom_vline(xintercept = realDiff, color = "blue", size = .3)+
ylab("Number")+
ggtitle("Difference in Means of Life Expectancy")
life_expectancy <- gapminder2 %>% select(lifeExp)
life_expectancy <- life_expectancy$lifeExp
perm_mean <- function(perms = 1000, values, n1)
{
## Variables ##
# perms: The number of permutations
# values (num):
# n1 (int): Size of group 1
###############
# Create vector of zeroes of length "perms" to store permuted mean differnces
mean_mat <- matrix(0,1000,1)
# Loop throught number of permutations
for (i in c(1:perms))
{
# Randomly separate vector "values" into disjoint groups of size "n1" and "length(values) - n1" respectively size <- length(values) - n1
randomSamp <- sample(values, length(values)-n1, replace = FALSE)
randomSamp2 <- sample(values, n1, replace = FALSE)
# Compute the sample means for the two groups from step 2
mean1 <- mean(randomSamp)
mean2 <- mean(randomSamp2)
# Compute the difference in sample means, store the value in the vector from step 1
mean_mat[[i]] <- (mean1-mean2)
}
# Return new updated vector, created in step 1
return(mean_mat)
}
life_expAm <- gapminder %>% filter(continent=="Americas") %>% select(lifeExp)
means <- as.tibble(perm_mean(values = life_expectancy, n1 = 300))
summary(life_expAm)
summary(life_expectancy)
realDiff <- mean(life_expAm$lifeExp)-mean(life_expectancy)
stdD <- sqrt((sd(life_expAm$lifeExp))^2/length(life_expAm$lifeExp) + (sd(life_expectancy))^2/length(life_expectancy))
zScore <- realDiff/stdD
zScore
ggplot(means, aes(x=V1 ))+geom_histogram()+
xlab("Means")+
geom_vline(xintercept = realDiff, color = "blue", size = .3)+
ylab("Number")+
ggtitle("Difference in Means of Life Expectancy")
ggplot(means, aes(x=V1 ))+geom_histogram()+
xlab("Means")+
geom_vline(xintercept = realDiff, color = "blue", size = .3)+
ylab("Number")+
ggtitle("Difference in Means of Life Expectancy")
